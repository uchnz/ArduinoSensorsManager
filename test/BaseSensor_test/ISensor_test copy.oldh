#include <gtest/gtest.h>
#include <ISensor.h>

class ISensorTest : public ::testing::Test
{
protected:
    void SetUp() override
    {
    }
};

class MockSensor : public ISensor
{
public:
    MockSensor();
    MockSensor(const char *name);

    void requestCurrentMeasurement() override;
    uint8_t getNumberOfConnectedSensors() override;
    double getCurrentMeasurementByID(uint8_t id) override;
    uint8_t getName(char *name) override;
    void setName(const char *name);
};

MockSensor::MockSensor()
{
    _sensorName[0] = 0;
}

MockSensor::MockSensor(const char *name)
    : ISensor(name)
{
}

void MockSensor::requestCurrentMeasurement()
{
}
uint8_t MockSensor::getNumberOfConnectedSensors()
{
    return 0;
}
double MockSensor::getCurrentMeasurementByID(uint8_t id)
{
    return 0;
}

uint8_t MockSensor::getName(char *name)
{
    return ISensor::getName(name);
}

void MockSensor::setName(const char *name)
{
    if ((!name) || (0 == strlen(name)))
        return;

    int nameLengthWithNull = strlen(name) + 1;
    if (nameLengthWithNull > sensor_nm::MAX_SENSOR_NAME)
        nameLengthWithNull = sensor_nm::MAX_SENSOR_NAME;
    memcpy(_sensorName, name, nameLengthWithNull);
}
